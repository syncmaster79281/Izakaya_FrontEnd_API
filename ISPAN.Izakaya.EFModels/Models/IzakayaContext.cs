// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ISPAN.Izakaya.EFModels.Models;

public partial class IzakayaContext : DbContext
{
    public IzakayaContext(DbContextOptions<IzakayaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivityItem> ActivityItems { get; set; }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<ArticleCategory> ArticleCategories { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<CartSetting> CartSettings { get; set; }

    public virtual DbSet<CartStatus> CartStatuses { get; set; }

    public virtual DbSet<CombinedOrder> CombinedOrders { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<CouponType> CouponTypes { get; set; }

    public virtual DbSet<CustomerFeedback> CustomerFeedbacks { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Faq> Faqs { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderDiscount> OrderDiscounts { get; set; }

    public virtual DbSet<OrderPayment> OrderPayments { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductStock> ProductStocks { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseRecord> PurchaseRecords { get; set; }

    public virtual DbSet<Questionnaire> Questionnaires { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    public virtual DbSet<ReservationStatus> ReservationStatuses { get; set; }

    public virtual DbSet<Reward> Rewards { get; set; }

    public virtual DbSet<Seat> Seats { get; set; }

    public virtual DbSet<SeatCart> SeatCarts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Activity>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Discount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EndTime).HasPrecision(0);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.StartTime).HasPrecision(0);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Branch).WithMany(p => p.Activities)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Activities_BranchId");
        });

        modelBuilder.Entity<ActivityItem>(entity =>
        {
            entity.HasOne(d => d.Activity).WithMany(p => p.ActivityItems)
                .HasForeignKey(d => d.ActivityId)
                .HasConstraintName("FK_ActivityItems_ActivityId");

            entity.HasOne(d => d.Product).WithMany(p => p.ActivityItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ActivityItems_ProductId");
        });

        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ArticleInfos");

            entity.Property(e => e.Contents).IsRequired();
            entity.Property(e => e.HideTime).HasColumnType("datetime");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.Articles)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Articles_CategoryId");

            entity.HasOne(d => d.Employee).WithMany(p => p.Articles)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Articles_EmployeeId");
        });

        modelBuilder.Entity<ArticleCategory>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_sotres");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.Tel)
                .IsRequired()
                .HasMaxLength(11);
        });

        modelBuilder.Entity<CartSetting>(entity =>
        {
            entity.Property(e => e.EndTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StartTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Seat).WithMany(p => p.CartSettings)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartSettings_SeatId");
        });

        modelBuilder.Entity<CartStatus>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(5);
        });

        modelBuilder.Entity<CombinedOrder>(entity =>
        {
            entity.Property(e => e.CreateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.SubmitDate).HasColumnType("datetime");
            entity.Property(e => e.Tel)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.Property(e => e.Condition)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DiscountMethod).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_BranchId");

            entity.HasOne(d => d.Product).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Coupons_ProductId");

            entity.HasOne(d => d.Type).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("FK_Coupons_TypeId");
        });

        modelBuilder.Entity<CouponType>(entity =>
        {
            entity.Property(e => e.Type).HasMaxLength(20);
        });

        modelBuilder.Entity<CustomerFeedback>(entity =>
        {
            entity.Property(e => e.Comment).HasMaxLength(100);

            entity.HasOne(d => d.Employee).WithMany(p => p.CustomerFeedbacks)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_CustomerFeedbacks_EmployeeId");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.Department)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.EmployeePassword)
                .IsRequired()
                .HasMaxLength(8);
            entity.Property(e => e.Gender).HasMaxLength(2);
            entity.Property(e => e.HireDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Branch).WithMany(p => p.Employees)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_BranchId");
        });

        modelBuilder.Entity<Faq>(entity =>
        {
            entity.Property(e => e.Answer)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Url).HasMaxLength(500);
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Members_1");

            entity.Property(e => e.AuthenticationCode).HasMaxLength(6);
            entity.Property(e => e.AuthenticationCodeGeneratedAt).HasColumnType("datetime");
            entity.Property(e => e.Birthday).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Salt).HasMaxLength(20);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.CreateTime).HasColumnType("datetime");

            entity.HasOne(d => d.CombinedOrder).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CombinedOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_CombinedOrderID");

            entity.HasOne(d => d.Seat).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_SeatId");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_OrderId");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_ProductId");
        });

        modelBuilder.Entity<OrderDiscount>(entity =>
        {
            entity.Property(e => e.AppliedValue).HasColumnType("decimal(7, 2)");
        });

        modelBuilder.Entity<OrderPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderPayments_1");

            entity.Property(e => e.PaymentTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CombinedOrder).WithMany(p => p.OrderPayments)
                .HasForeignKey(d => d.CombinedOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPayments_CombinedOrderId");

            entity.HasOne(d => d.Member).WithMany(p => p.OrderPayments)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPayments_MemberId");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.OrderPayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPayments_PaymentMethodID");

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.OrderPayments)
                .HasForeignKey(d => d.PaymentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderPayments_PaymentStatusID");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.Property(e => e.Method)
                .IsRequired()
                .HasMaxLength(5);
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(5);
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.Property(e => e.JobTitle)
                .IsRequired()
                .HasMaxLength(5);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_product");

            entity.Property(e => e.DisplayOrder).HasDefaultValue(1);
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ImageUrl).HasMaxLength(250);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Present).HasMaxLength(200);

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_ProductCategories");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_productCategory");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Url).HasMaxLength(200);
        });

        modelBuilder.Entity<ProductStock>(entity =>
        {
            entity.HasOne(d => d.Branch).WithMany(p => p.ProductStocks)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductStocks_BranchId");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductStocks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductStocks_ProductId");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_purchaseOrder");

            entity.Property(e => e.Subtotal).HasComputedColumnSql("([Quantity]*[UnitCost])", false);

            entity.HasOne(d => d.Product).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrders_ProductId");

            entity.HasOne(d => d.Record).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrders_PurchaseRecords");
        });

        modelBuilder.Entity<PurchaseRecord>(entity =>
        {
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.PurchaseRecords)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseRecords_Branches");
        });

        modelBuilder.Entity<Questionnaire>(entity =>
        {
            entity.Property(e => e.FavoriteDish)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.SatisfactionLevel)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Order).WithMany(p => p.Questionnaires)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questionnaires_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.Questionnaires)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questionnaires_Questionnaires");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FillUp).HasMaxLength(10);
            entity.Property(e => e.Message).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.OrderTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Random)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReservationTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Tel)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Branch).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_BranchId");

            entity.HasOne(d => d.Member).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Reservations_MemberId");

            entity.HasOne(d => d.Seat).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_SeatId");
        });

        modelBuilder.Entity<ReservationStatus>(entity =>
        {
            entity.Property(e => e.ReservationTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Branch).WithMany(p => p.ReservationStatuses)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservationStatuses_BranchId");

            entity.HasOne(d => d.Seat).WithMany(p => p.ReservationStatuses)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReservationStatuses_SeatId");
        });

        modelBuilder.Entity<Reward>(entity =>
        {
            entity.HasOne(d => d.Coupon).WithMany(p => p.Rewards)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK_Rewards_CouponId");

            entity.HasOne(d => d.Member).WithMany(p => p.Rewards)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Rewards_MemberId");
        });

        modelBuilder.Entity<Seat>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.QrcodeLink)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QRCodeLink");

            entity.HasOne(d => d.Branch).WithMany(p => p.Seats)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seats_BranchId");
        });

        modelBuilder.Entity<SeatCart>(entity =>
        {
            entity.Property(e => e.Notes).HasMaxLength(50);
            entity.Property(e => e.OrderTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CartStatus).WithMany(p => p.SeatCarts)
                .HasForeignKey(d => d.CartStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeatCarts_CartStatusID");

            entity.HasOne(d => d.Product).WithMany(p => p.SeatCarts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeatCarts_ProductId");

            entity.HasOne(d => d.Seat).WithMany(p => p.SeatCarts)
                .HasForeignKey(d => d.SeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeatCarts_SeatId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}